import React, { Fragment } from 'react';
import Head from 'next/head';
import { ThemeProvider } from 'styled-components';
import { theme } from '../../theme/cryptoModern';
import { ResetCSS } from '../../assets/css/style';
import {
  GlobalStyle,
  CryptoWrapper,
} from '../../../lib/containers/CryptoModern/cryptoModern.style';
import Sticky from 'react-stickynode';
import Navbar from '../../../lib/containers/CryptoModern/Navbar';
import Banner from '../../../lib/containers/CryptoModern/Banner';
import CountDown from '../../../lib/containers/CryptoModern/CountDown';
import Features from '../../../lib/containers/CryptoModern/FeatureSection';
import WorkHistory from '../../../lib/containers/CryptoModern/WorkHistory';
import Investment from '../../../lib/containers/CryptoModern/Investment';
import FundRaising from '../../../lib/containers/CryptoModern/FundRaising';
import Privacypolicy from '../../../lib/containers/CryptoModern/Privacy';
import WalletSection from '../../../lib/containers/CryptoModern/WalletSection';
import MapSection from '../../../lib/containers/CryptoModern/MapSection';
import FaqSection from '../../../lib/containers/CryptoModern/FaqSection';
import Newsletter from '../../../lib/containers/CryptoModern/Newsletter';
import Footer from '../../../lib/containers/CryptoModern/Footer';
import QUERY from '../graphql/showcase-query';
import BCComponent from '../pool';
import BCLink from '../../../lib/containers/_Shared/BCLink';
import { useQuery } from '@apollo/react-hooks';

export default props => {
  const { config, path } = props;
  try {
    const queryResult = useQuery(QUERY, {
      variables: {
        rootId: config.root,
        deep: config.deep,
        path,
      },
    });
    if (queryResult.loading) {
      return <div>Loading ... </div>;
    }
    if (queryResult.error) {
      return <div>Error loading data: {queryResult.error.message}</div>;
    }
    if (
      queryResult.data &&
      queryResult.data.contents &&
      queryResult.data.contents.length > 0
    ) {
      const data = queryResult.data.contents[0];
      const rootModelData = data.data.reduce(function(map, obj) {
        map[obj.Key] = obj.Value;
        return map;
      }, {});
      const isAR = config.lang == 'AR';
      return (
        <ThemeProvider theme={theme}>
          <Fragment>
            <Head>
              <title>{data.title}</title>
              <meta name="Description" content={data.metaDescription} />
              <meta name="theme-color" content={rootModelData.primary} />
              {/*<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />*/}
              <link
                rel="icon"
                type="image/png"
                sizes="32x32"
                href={rootModelData.favicon32}
              />
              <link
                rel="icon"
                type="image/png"
                sizes="16x16"
                href={rootModelData.favicon16}
              />
              {/* Load google fonts */}
              {isAR ? (
                /*<link href="https://fonts.googleapis.com/css2?family=Markazi+Text:wght@400;500;600;700&display=swap" rel="stylesheet"></link>*/
                <link
                  href="https://fonts.googleapis.com/css2?family=Tajawal:wght@200;300;400;500;700;800;900&display=swap"
                  rel="stylesheet"
                ></link>
              ) : (
                <link
                  href="https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i"
                  rel="stylesheet"
                />
              )}
            </Head>
            {/* end of head */}

            <ResetCSS />
            <GlobalStyle />
            {/* end of global and reset style */}
            {/* start app classic landing */}
            <CryptoWrapper>
              <div id="fb-root"></div>
              {data.children &&
                data.children
                  .filter(m => m.online)
                  .map((model, index) => (
                    <BCComponent
                      key={`BCComponent${index}`}
                      modelId={model.modelId}
                      model={model}
                      // isAR={isAR}
                    />
                  ))}
              <BCLink />
              {/* 
              <Sticky top={0} innerZ={9999} activeClass="sticky-active">
                <Navbar />
              </Sticky>
              <ContentWrapper>
                  <Banner />
                  <CountDown />
                  <Features />
                  <WorkHistory />
                  <Investment />
                  <FundRaising />
                  <Privacypolicy />
                  <WalletSection />
                  <MapSection />
                  <FaqSection />
                  <Newsletter />
                </ContentWrapper> */}
              <Footer />
            </CryptoWrapper>
            {/* end of app classic landing */}
          </Fragment>
        </ThemeProvider>
      );
    } else {
      return <div>No data found</div>;
    }
  } catch (ex) {
    return <div>Error: {ex.message}</div>;
  }
};
