import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { ThemeProvider } from 'styled-components';
import Sticky from 'react-stickynode';
import { appTheme } from '../../theme/app';
import {
  GlobalStyle,
  AppWrapper,
  ConditionWrapper,
} from '../../../lib/containers/App/app.style';
import { ResetCSS } from '../../assets/css/style';
import Navbar from '../../../lib/containers/App/Navbar';
import DomainSection from '../../../lib/containers/App/Banner';
import FeatureSection from '../../../lib/containers/App/FeatureSection';
import ControllSection from '../../../lib/containers/App/Control';
import TestimonialSection from '../../../lib/containers/App/Testimonial';
import PartnerHistory from '../../../lib/containers/App/PartnerHistory';
import PaymentSection from '../../../lib/containers/App/PaymentSection';
import Footer from '../../../lib/containers/App/Footer';
import FeatureSlider from '../../../lib/containers/App/FeatureSlider';
import FeatureSliderTwo from '../../../lib/containers/App/FeatureSliderTwo';
import { DrawerProvider } from '../../contexts/DrawerContext';
import BCComponent from '../pool';
import BCLink from '../../../lib/containers/_Shared/BCLink';
import QUERY from '../graphql/showcase-query';
import { useQuery } from '@apollo/react-hooks';

function getSize() {
  return {
    innerHeight: window.innerHeight,
    innerWidth: window.innerWidth,
    outerHeight: window.outerHeight,
    outerWidth: window.outerWidth,
  };
}

function useWindowSize() {
  let [windowSize, setWindowSize] = useState(getSize());

  function handleResize() {
    setWindowSize(getSize());
  }

  useEffect(() => {
    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  return windowSize;
}

export default props => {
  const { config, path } = props;
  try {
    const queryResult = useQuery(QUERY, {
      variables: {
        rootId: config.root,
        deep: config.deep,
        path,
      },
    });
    if (queryResult.loading) {
      return <div>Loading ... </div>;
    }
    if (queryResult.error) {
      return <div>Error loading data: {queryResult.error.message}</div>;
    }
    if (
      queryResult.data &&
      queryResult.data.contents &&
      queryResult.data.contents.length > 0
    ) {
      let data = queryResult.data.contents[0];
      let rootModelData = data.data.reduce(function(map, obj) {
        map[obj.Key] = obj.Value;
        return map;
      }, {});
      const size = process.browser && useWindowSize();
      return (
        <ThemeProvider theme={appTheme}>
          <>
            <Head>
              <title>{rootModelData.title}</title>
              <meta name="Description" content="React next landing page" />
              <meta name="theme-color" content="#ec5555" />
              <link
                href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,700"
                rel="stylesheet"
              />
            </Head>
            <ResetCSS />
            <GlobalStyle />
            <AppWrapper>
              {data.children &&
                data.children
                  .filter(m => m.online)
                  .map((model, index) => (
                    <BCComponent
                      key={`BCComponent${index}`}
                      modelId={model.modelId}
                      model={model}
                      // isAR={isAR}
                    />
                  ))}
              <BCLink />
            </AppWrapper>
          </>
        </ThemeProvider>
      );
    } else {
      return <div>No data found</div>;
    }
  } catch (ex) {
    console.log(ex);
    return <div>Error: {ex.message}</div>;
  }
};
